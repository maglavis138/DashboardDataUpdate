if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'4')){s4 = ''} else {s4 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'4'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'5')){s5 = ''} else {s5 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'5'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'6')){s6 = ''} else {s6 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'6'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'7')){s7 = ''} else {s7 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'7'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'8')){s8 = ''} else {s8 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'8'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'9')){s9 = ''} else {s9 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'9'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'10')){s10 = ''} else {s10 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'10'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'11')){s11 = ''} else {s11 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'11'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'12')){s12 = ''} else {s12 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'12'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'13')){s13 = ''} else {s13 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'13'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'14')){s14 = ''} else {s14 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'14'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'15')){s15 = ''} else {s15 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'15'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'16')){s16 = ''} else {s16 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'16'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'17')){s17 = ''} else {s17 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'17'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'18')){s18 = ''} else {s18 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'18'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'19')){s19 = ''} else {s19 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'19'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'20')){s20 = ''} else {s20 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'20'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'21')){s21 = ''} else {s21 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'21'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'22')){s22 = ''} else {s22 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'22'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'23')){s23 = ''} else {s23 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'23'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'24')){s24 = ''} else {s24 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'24'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'25')){s25 = ''} else {s25 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'25'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'26')){s26 = ''} else {s26 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'26'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'27')){s27 = ''} else {s27 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'27'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'28')){s28 = ''} else {s28 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'28'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'29')){s29 = ''} else {s29 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'29'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'30')){s30 = ''} else {s30 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'30'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'31')){s31 = ''} else {s31 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'31'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'32')){s32 = ''} else {s32 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'32'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'33')){s33 = ''} else {s33 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'33'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'34')){s34 = ''} else {s34 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'34'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'35')){s35 = ''} else {s35 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'35'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'36')){s36 = ''} else {s36 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'36'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'37')){s37 = ''} else {s37 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'37'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'38')){s38 = ''} else {s38 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'38'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'39')){s39 = ''} else {s39 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'39'}
if(is.null(data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'40')){s40 = ''} else {s40 = data$data$values[match('post_video_retention_graph',data$data$name)][[1]][,1]$'40'}
page_total_likes = pi$total_likes[match(date, pi$date)]
page_new_likes   = pi$daily_new_likes[match(date, pi$date)]
result = as.data.frame(t(as.matrix(c(status_id,permalink,post_type,sharetext,headline,link,full_picture,created_time,date,hour,page_total_likes,page_new_likes,post_impressions,post_reach,post_reach_fan_unique,post_reach_viral_unique,comments_on_post,likes_on_post,shares_on_post,total_comments,total_likes,total_shares,comments_on_shares,likes_on_shares,shares_on_shares,link_clicks,photo_view,video_play,other_clicks,post_negative_feedback,post_story_adds,post_stories,post_storytellers,post_consumptions,post_engaged_users,post_engaged_fan,post_video_complete_views_30s_autoplayed,post_video_complete_views_30s_clicked_to_play,post_video_complete_views_30s_organic,post_video_complete_views_30s_paid,post_video_complete_views_30s_unique,post_video_avg_time_watched,post_video_complete_views_organic_unique,post_video_length,post_video_views,post_video_views_autoplayed,post_video_views_clicked_to_play,post_video_views_10s_unique,post_video_views_10s_autoplayed,post_video_views_10s_clicked_to_play,post_video_views_10s_sound_on,post_video_views_sound_on, s0,	s1,	s2,	s3,	s4,	s5,	s6,	s7,	s8,	s9,	s10,	s11,	s12,	s13,	s14,	s15,	s16,	s17,	s18,	s19,	s20,	s21,	s22,	s23,	s24,	s25,	s26,	s27,	s28,	s29,	s30,	s31,	s32,	s33,	s34,	s35,	s36,	s37,	s38,	s39,	s40))))
return(result)
}
# statuses = c('1405630409737397_1510785635888540','1405630409737397_1511436792490091','1405630409737397_1511436792490091','1405630409737397_1512136232420147','1405630409737397_1532264077074029','1405630409737397_1532392773727826','1405630409737397_1560033190963784','1405630409737397_1647037648930004','1405630409737397_1653348084965627','1405630409737397_1653363801630722','1405630409737397_1653349724965463','1405630409737397_1653346828299086','1405630409737397_1653375138296255','1405630409737397_1653423528291416','1405630409737397_1653337191633383','1405630409737397_1653411344959301','1405630409737397_1653338324966603','1405630409737397_1653295401637562','1405630409737397_1653423781624724','1405630409737397_1653339828299786','1405630409737397_1653285528305216','1405630409737397_1653425824957853','1405630409737397_1653715424928893','1405630409737397_1653298638303905','1405630409737397_1653754348258334','1405630409737397_1653786898255079','1405630409737397_1653773454923090','1405630409737397_1653837734916662','1405630409737397_1653864711580631','1405630409737397_1653826244917811','1405630409737397_1653823791584723','1405630409737397_1653860541581048','1405630409737397_1653841741582928','1405630409737397_1653883098245459','1405630409737397_1653829834917452','1405630409737397_1654051918228577','1405630409737397_1653345221632580','1405630409737397_1654052261561876','1405630409737397_1650206555279780','1405630409737397_1653850838248685','1405630409737397_1654052101561892','1405630409737397_1653253214975114','1405630409737397_1654294671537635','1405630409737397_1653851061581996','1405630409737397_1653773421589760','1405630409737397_1654295988204170','1405630409737397_1653304694969966','1405630409737397_1653302434970192','1405630409737397_1650666325233803','1405630409737397_1654435468190222','1405630409737397_1654435698190199','1405630409737397_1659396867694082','1405630409737397_1671326359834466','1405630409737397_1673861356247633','1405630409737397_1673848899582212','1405630409737397_1682996722000763')
np = 0
final = data.frame()
for(status in statuses){
final =  rbind.fill(final, processFacebookPageFeedStatus(status))
np = np +1
if(np %% 20 == 0){
print(paste(np, 'Posts Procesados (Woooooot!!?!!!?)'))}
}
colnames(final) = c('status_id','permalink','post_type','sharetext','headline','link','full_picture','created_time','date','hour','page_total_likes','page_new_likes','post_impressions','post_reach','post_reach_fan_unique','post_reach_viral_unique','comments_on_post','likes_on_post','shares_on_post','total_comments','total_likes','total_shares','comments_on_shares','likes_on_shares','shares_on_shares','link_clicks','photo_view','video_play','other_clicks','post_negative_feedback','post_story_adds','post_stories','post_storytellers','post_consumptions','post_engaged_users','post_engaged_fan','post_video_complete_views_30s_autoplayed','post_video_complete_views_30s_clicked_to_play','post_video_complete_views_30s_organic','post_video_complete_views_30s_paid','post_video_complete_views_30s_unique','post_video_avg_time_watched','post_video_complete_views_organic_unique','post_video_length','post_video_views','post_video_views_autoplayed','post_video_views_clicked_to_play','post_video_views_10s_unique','post_video_views_10s_autoplayed','post_video_views_10s_clicked_to_play','post_video_views_10s_sound_on','post_video_views_sound_on','s0',	's1',	's2',	's3',	's4',	's5',	's6',	's7',	's8',	's9',	's10',	's11',	's12',	's13',	's14',	's15',	's16',	's17',	's18',	's19',	's20',	's21',	's22',	's23',	's24',	's25',	's26',	's27',	's28',	's29',	's30',	's31',	's32',	's33',	's34',	's35',	's36',	's37',	's38',	's39',	's40')
# con<-file(paste(as.character(Sys.Date()), ".csv"), encoding="UTF-8")
write.csv(final, paste(as.character(Sys.Date()), '.csv'), row.names = FALSE, fileEncoding = "UTF-8")
# X4 <- read.csv("test4.csv", header = T)
#
# X4$v2 <- paste(X4$text, "נווה שאנן")
#
#
# write.csv(X4, "test4.csv", row.names=FALSE)
View(final)
Data <- read.csv("Facebook Insights WAM.csv", header = TRUE, stringsAsFactors = FALSE)
View(Data)
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
View(Data)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select status_id, feed_likes, love, wow, haha, sad, angry, post_source_type, from_name from FEED_DATA")
ReactionsData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
Data <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
View(Data)
library(plyr)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
# rs <- dbSendQuery(mydb, "select status_id, feed_likes, love, wow, haha, sad, angry, post_source_type, from_name from FEED_DATA")
# ReactionsData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
# EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
WamPostData$date <- as.Date(WamPostData$date)
rm(list=ls())
library(plyr)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
# rs <- dbSendQuery(mydb, "select status_id, feed_likes, love, wow, haha, sad, angry, post_source_type, from_name from FEED_DATA")
# ReactionsData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
# EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
View(WamFeedData)
View(WamPageData)
View(WamPostData)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
View(WamPostData)
View(WamFeedData)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
View(Data)
LinkData <- read.csv("LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
# Data[Data$sharetext == "",]$sharetext <- "No Share Text"
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Encoding(Data$sharetext) <- "latin1"
Encoding(Data$headline) <- "latin1"
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral_unique/Data$post_reach_fan_unique
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral_unique/(Data$post_reach_fan_unique + Data$post_reach_viral_unique))
Data$fan_rate <- (Data$post_reach_fan_unique/(Data$post_reach_fan_unique + Data$post_reach_viral_unique))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
ContentTrackData <- fetch(rs, -1)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
# rs <- dbSendQuery(mydb, "select status_id, feed_likes, love, wow, haha, sad, angry, post_source_type, from_name from FEED_DATA")
# ReactionsData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
ContentTrackData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
# EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
View(ContentTrackData)
rm(list=ls())
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
# EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
LinkData <- read.csv("LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
View(Data)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
View(Data)
Data <- Data[!duplicated(Data),]
Data$date <- as.Date(Data$date)
clas(Data$created_time)
class(Data$created_time)
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%Y-%m-%d %H:%M:%S"), tz = "GMT")
class(Data$created_time)
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Sys.getlocale()
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral_unique/Data$post_reach_fan_unique
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
DataArticles <- Data[Data$post_type == "link",]
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
DataArticles <- merge(DataArticles[,], LinkData[,c("status_id", "mitu_link", "category", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataArticles <- ddply(DataArticles, "mitu_link", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))
DataArticles$author_status <- ifelse(!(DataArticles$author %in% c("Jorge Rodriguez-Jimenez", "Omar Villegas", "Lucas Molandes", "Jessica Garcia", "Andrew Santiago", "Jason Marcus")), "Contributor", DataArticles$author)
DataArticles$author_status <- ifelse(DataArticles$author %in% c("mitÃº Staff", "Adriana Venegas", "Fidel Martinez", "Alex Alvarez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
unique(DataArticles$author)
DataArticles$author_status <- ifelse(!(DataArticles$author %in% c("Jorge Rodriguez-Jimenez", "Omar Villegas", "Lucas Molandes", "Jessica Garcia", "Andrew Santiago", "Jason Marcus")), "Contributor", DataArticles$author)
DataArticles$author_status <- ifelse(DataArticles$author %in% c("mitú Staff", "Adriana Venegas", "Fidel Martinez", "Alex Alvarez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
DataVideos <- Data[Data$post_type == "video",]
DataVideos <- merge(DataVideos[,], VideoData[,c("status_id", "video_repost_sharetext", "video_meme", "series", "category", "format", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataVideos <- ddply(DataVideos, "video_repost_sharetext", transform, average_views_rate = mean(views_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_video_views = mean(post_video_views), average_viral_fan_rate = mean(viral_fan_rate))
DataPhotos <- Data[Data$post_type == "photo",]
DataPhotos <- merge(DataPhotos[,],PhotoData[,c("status_id", "image_text_py", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataPhotos <- ddply(DataPhotos, "image_text_py", transform, average_share_rate = mean(share_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_viral_fan_rate = mean(viral_fan_rate))
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%Y-%m-%d %H:%M:%S"), tz = "GMT")
Data$date <- as.Date(Data$date)
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
rm(list=ls())
library(plyr)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
write.csv(Data, 'WAMData.csv', row.names = F)
LinkData <- read.csv("LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%Y-%m-%d %H:%M:%S"), tz = "GMT")
Data$date <- as.Date(Data$date)
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
write.csv(DataArticles, 'WAMDataArticles.csv', row.names = F)
Data[which(grep("instagram", Data$headline)),]$post_type
Data[grep("instagram", Data$headline),]$post_type
grep("instagram", Data$headline)
grep("Instagram", Data$headline)
Data[grep("Instagram", Data$headline),]$post_type
library(plyr)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
write.csv(Data, 'WAMData.csv', row.names = F)
LinkData <- read.csv("LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%Y-%m-%d %H:%M:%S"), tz = "GMT")
Data$date <- as.Date(Data$date)
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
Data[grep("Instagram", Data$headline),]$post_type <- "photo"
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
write.csv(DataArticles, 'WAMDataArticles.csv', row.names = F)
library(plyr)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA where from_name = 'We are mitu'")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
Data$from_name
unique(Data$from_name)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
unique(Data$from_name)
library(plyr)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from FEED_DATA where from_name = 'We are mitu'")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA where from_name = 'We are mitu'")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
unique(Data$from_name)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%Y-%m-%d %H:%M:%S"), tz = "GMT")
Data$date <- as.Date(Data$date)
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
Data[grep("Instagram", Data$headline),]$post_type <- "photo"
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
write.csv(DataArticles, 'WAMDataArticles.csv', row.names = F)
DataVideos <- Data[Data$post_type == "video",]
DataVideos <- Data[Data$post_type == "video",]
write.csv(DataVideos, 'WAMDataVideos.csv', row.names = F)
DataPhotos <- Data[Data$post_type == "photo",]
write.csv(DataPhotos, 'WAMDataPhotos.csv', row.names = F)
Data[which(grep("Instagram", Data$headline) & grep("instagram", Data$link)),]$post_type
grep("Instagram", Data$headline)
grep("instagram", Data$link)
Data[12594,]$permalink
Data[12594,]$link
rows(Data[which(c('Instagram' %in% Data$headline)),])
row(Data[which(c('Instagram' %in% Data$headline)),])
row.names(Data[which(c('Instagram' %in% Data$headline)),])
row(Data[which('Instagram' %in% Data$headline),])
View(Data)
Data[grep("Instagram", Data$headline),]$headline
Data[grep(c("Instagram", "we are mitú"), Data$headline),]$headline
Data[grep("Instagram | we are mitú", Data$headline),]$headline
Data[grep("Instagramwe are mitú", Data$headline),]$headline
Data[grep("Instagram we are mitú", Data$headline),]$headline
Data[grep("[Instagramwe are mitú]", Data$headline),]$headline
grepl("Instagram", Data$headline) & grepl("we are mitú", Data$headline)
Data[ggrepl("Instagram", Data$headline) & grepl("we are mitú", Data$headline),]$headline
Data[(ggrepl("Instagram", Data$headline) & grepl("we are mitú", Data$headline)),]$headline
Data[grepl("Instagram", Data$headline) & grepl("we are mitú", Data$headline),] <- "photo"
Data[(grepl("Instagram", Data$headline) & grepl("we are mitú", Data$headline)),]$headline
library(plyr)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from FEED_DATA where from_name = 'We are mitu'")
WamFeedData <- fetch(rs, -1)
# rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
# ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA where from_name = 'We are mitu'")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
WamFeedData$date <- as.Date(WamFeedData$date)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
write.csv(Data, 'WAMData.csv', row.names = F)
LinkData <- read.csv("LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%Y-%m-%d %H:%M:%S"), tz = "GMT")
Data$date <- as.Date(Data$date)
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
Data[(grepl("Instagram", Data$headline) & grepl("we are mitú", Data$headline)),]$post_type <- "photo"
DataPhotos <- Data[Data$post_type == "photo",]
write.csv(DataPhotos, 'WAMDataPhotos.csv', row.names = F)
